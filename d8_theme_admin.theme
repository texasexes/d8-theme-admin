<?php
require_once('modules/contrib/devel/kint/kint/Kint.class.php');
/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

// storing img_blockname in attributes so that I can pass it on
function d8_theme_admin_preprocess_responsive_image_formatter(&$variables) {
  if (isset($variables['item'])){
    $itemParent = $variables['item']->getParent();
    $fieldName = $itemParent->getName();
    $fieldNameBundle = $itemParent->getFieldDefinition()->getType();
    $variables['responsive_image']['#attributes']['field_info']['field_name'] = $fieldName;
    $variables['responsive_image']['#attributes']['field_info']['field_name_bundle'] = $fieldNameBundle;

    $fieldParent = $variables['item']->getEntity();
    $fieldParentBundle = $fieldParent->bundle();

    $fieldParentBundleType = $fieldParent->getEntityTypeId();
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle'] = $fieldParentBundle;
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle_type'] = $fieldParentBundleType;
  }

  if (isset($variables['url'])) {
    $variables['responsive_image']['#attributes']['img_blockname'] = "link";
  }
}

// fixes bug where style_name is never set
 function d8_theme_admin_preprocess_responsive_image(&$variables) {
   if (isset($variables['responsive_image_style_id'])) {
     $variables['img_element']['#style_name'] = $variables['responsive_image_style_id'];
   }
 }

// retrieving img_blockname from attributes so that it can be used in the BEM class
// then unsetting it so it doesn't display as an attribute
function d8_theme_admin_preprocess_image(&$variables) {

  if (isset($variables['attributes']['img_blockname'])) {
    $variables['img_blockname'] = implode($variables['attributes']['img_blockname']);
    unset($variables['attributes']['img_blockname']);
  }

  if (isset($variables['attributes']['field_info'])) {
    unset($variables['attributes']['field_info']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
 function d8_theme_admin_theme_suggestions_responsive_image_formatter_alter(array &$suggestions, array $variables) {

   $itemParent = $variables['item']->getParent();

   $fieldName = $itemParent->getName();
   $fieldNameBundle = $itemParent->getFieldDefinition()->getType();

   $fieldParent = $variables['item']->getEntity();
   $fieldParentBundle = $fieldParent->bundle();

   $fieldParentBundleType = $fieldParent->getEntityTypeId();

   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);

 }
function d8_theme_admin_theme_suggestions_image_alter(array &$suggestions, array $variables) {

  $fieldParentBundle = $variables['attributes']['field_info']['field_parent_bundle'];
  $fieldParentBundleType = $variables['attributes']['field_info']['field_parent_bundle_type'];
  $fieldName = $variables['attributes']['field_info']['field_name'];
  $fieldNameBundle = $variables['attributes']['field_info']['field_name_bundle'];

  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);

}

// function d8_theme_admin_preprocess_paragraph(&$variables) {
//   // Kint::dump( $_SERVER );
//   // Kint::dump( $variables );
//
//   if ($variables['paragraph']->hasField('field_view_mode')) {
//     $view_mode = $variables['paragraph']->field_view_mode->value;
//     if (isset($variables['content']['field_ref_node']['0']['#view_mode'])) {
//       $variables['content']['field_ref_node']['0']['#view_mode'] = $view_mode;
//       unset($variables['content']['field_ref_node']['0']['#cache']['keys']);
//     }
//   }
//
// }

// Adding theme suggestions to form submit items
function d8_theme_admin_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#form_id'];
  $form['keys']['#attributes']['data-twig-suggestion'] = $form['#form_id'];
}

function d8_theme_admin_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

function d8_theme_admin_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'form__' . $element['#form_id']; // Machine name of form.
}

/**
 * Implements hook_theme_registry_alter().
 * @param $theme_registry
 */
function d8_theme_admin_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['top_parent'] = "TEST";
}

function d8_theme_admin_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    $title = $node->getTitle();
    $path = \Drupal::service('path.current')->getPath();

    foreach ($variables['breadcrumb'] as $key => $value) {
      if ($variables['breadcrumb'][$key]['url'] == $path) {
        $variables['breadcrumb'][$key]['text'] = $title;
      }
    }
  }
}

function d8_theme_admin_preprocess_field(&$variables) {
  //get the value of the field

  $parent_entity = $variables['element']['#object'];

  if ($parent_entity->hasField('field_node_ref_02')) {
    if (!$parent_entity->get('field_node_ref_02')->isEmpty()) {

      $reference_field = $parent_entity->get('field_node_ref_02')->first();
      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if ($loaded_entity->hasField('field_txex_list_text_08')) {
        if (!$loaded_entity->get('field_txex_list_text_08')->isEmpty()){
          $field_layout_type = $loaded_entity->get('field_txex_list_text_08')->first()->getValue();
          $field_layout_type_value = $field_layout_type['value'];
        }
      }

      $field_modifiers = [];

      if ($loaded_entity->hasField('field_txex_list_text_07')) {
        if (!$loaded_entity->get('field_txex_list_text_07')->isEmpty()) {
          $field_text_type = $loaded_entity->get('field_txex_list_text_07')->first()->getValue();
          $field_text_type_value = $field_text_type['value'];
          $field_modifiers = $field_modifiers + array($field_text_type_value => $field_text_type_value);
        }
      }

      $variables['field_blockname'] = $field_layout_type_value;
      $variables['field_modifiers'] = $field_modifiers;
    }
  }
}

  function d8_theme_admin_preprocess_paragraph(&$variables) {

  $paragraph = $variables['elements']['#paragraph'];

  if ($paragraph->hasField('field_node_ref_02')) {
    $reference_field = $paragraph->get('field_node_ref_02')->first();

    if ($reference_field) {
      $paragraph_layout_type_value = "";
      $paragraph_modifiers = [];

      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if ($loaded_entity->get('field_txex_list_text_02')->getValue()) {
        $paragraph_layout_type = $loaded_entity->get('field_txex_list_text_02')->first()->getValue();
        $paragraph_layout_type_value = $paragraph_layout_type['value'];
      }

      if ($loaded_entity->get('field_txex_list_text_03')->getValue()) {
        $paragraph_row_layout = $loaded_entity->get('field_txex_list_text_03')->first()->getValue();
        $paragraph_row_layout_value = $paragraph_row_layout['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_row_layout_value => $paragraph_row_layout_value);
      }

      if ($loaded_entity->get('field_txex_list_text_04')->getValue()) {
        $paragraph_background = $loaded_entity->get('field_txex_list_text_04')->first()->getValue();
        $paragraph_background_value = $paragraph_background['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_background_value => $paragraph_background_value);
      }

      if ($loaded_entity->get('field_txex_list_text_05')->getValue()) {
        $paragraph_layout_orientation = $loaded_entity->get('field_txex_list_text_05')->first()->getValue();
        $paragraph_layout_orientation_value = $paragraph_layout_orientation['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_orientation_value => $paragraph_layout_orientation_value);
      }

      if ($loaded_entity->get('field_txex_list_text_06')->getValue()) {
        $paragraph_layout_width = $loaded_entity->get('field_txex_list_text_06')->first()->getValue();
        $paragraph_layout_width_value = $paragraph_layout_width['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_width_value => $paragraph_layout_width_value);
      }

      if ($loaded_entity->get('field_txex_boolean_01')->getValue()) {
        $paragraph_reverse_order = $loaded_entity->get('field_txex_boolean_01')->first()->getValue();
        // kint($paragraph_reverse_order['value']);
        if ($paragraph_reverse_order['value']) {
          $paragraph_modifiers = $paragraph_modifiers + array('reverse-order' => 'reverse-order');
        }
      }

      $variables['paragraph_base_class'] = $paragraph_layout_type_value;
      $variables['paragraph_modifiers'] = $paragraph_modifiers;
    }
  }

  if ($paragraph->hasField('field_para_ref_02')) {
    $referenced_paragraphs = $paragraph->get('field_para_ref_02')->getValue();

    foreach ( $referenced_paragraphs as $key => $element ) {
      $loaded_child_paragraph = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );

      if ($loaded_child_paragraph->hasField('field_node_ref_02')) {
          $node_reference_field = $loaded_child_paragraph->get('field_node_ref_02')->first();

        if ($node_reference_field) {
          $referenced_entity = $node_reference_field->getValue();
          $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

          if ($loaded_entity->hasField('field_txex_ref_para_view_mode')) {
            if (!empty($loaded_entity->get('field_txex_ref_para_view_mode')->first())) {
              $paragraph_view_mode = $loaded_entity->get('field_txex_ref_para_view_mode')->first()->getValue();
              $paragraph_view_mode_value = $paragraph_view_mode['target_id'];
              $paragraph_view_mode_value = explode('.', $paragraph_view_mode_value, 2)[1];
              $variables['content']['field_para_ref_02'][$key]['#view_mode'] = $paragraph_view_mode_value;
            }
          }
        }
      }
    }
  }
}




function d8_theme_admin_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
    // If you want you can add a template suggestion for all views
    // based on their ID:
    $suggestions[] = sprintf('views_view__%s', $variables['view']->id());

    // Or you can check the ID, add suggestions, do whatever you want
    // ...
}
